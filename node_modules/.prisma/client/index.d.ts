
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Loja
 * 
 */
export type Loja = $Result.DefaultSelection<Prisma.$LojaPayload>
/**
 * Model Frota
 * 
 */
export type Frota = $Result.DefaultSelection<Prisma.$FrotaPayload>
/**
 * Model CarroLoja
 * 
 */
export type CarroLoja = $Result.DefaultSelection<Prisma.$CarroLojaPayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Lojas
 * const lojas = await prisma.loja.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Lojas
   * const lojas = await prisma.loja.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<'extends', Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.loja`: Exposes CRUD operations for the **Loja** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Lojas
    * const lojas = await prisma.loja.findMany()
    * ```
    */
  get loja(): Prisma.LojaDelegate<ExtArgs>;

  /**
   * `prisma.frota`: Exposes CRUD operations for the **Frota** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Frotas
    * const frotas = await prisma.frota.findMany()
    * ```
    */
  get frota(): Prisma.FrotaDelegate<ExtArgs>;

  /**
   * `prisma.carroLoja`: Exposes CRUD operations for the **CarroLoja** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more CarroLojas
    * const carroLojas = await prisma.carroLoja.findMany()
    * ```
    */
  get carroLoja(): Prisma.CarroLojaDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.7.1
   * Query Engine version: 23fdc5965b1e05fc54e5f26ed3de66776b93de64
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray | { toJSON(): unknown }

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Loja: 'Loja',
    Frota: 'Frota',
    CarroLoja: 'CarroLoja'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }


  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs}, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    meta: {
      modelProps: 'loja' | 'frota' | 'carroLoja'
      txIsolationLevel: Prisma.TransactionIsolationLevel
    },
    model: {
      Loja: {
        payload: Prisma.$LojaPayload<ExtArgs>
        fields: Prisma.LojaFieldRefs
        operations: {
          findUnique: {
            args: Prisma.LojaFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LojaPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.LojaFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LojaPayload>
          }
          findFirst: {
            args: Prisma.LojaFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LojaPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.LojaFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LojaPayload>
          }
          findMany: {
            args: Prisma.LojaFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LojaPayload>[]
          }
          create: {
            args: Prisma.LojaCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LojaPayload>
          }
          createMany: {
            args: Prisma.LojaCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.LojaDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LojaPayload>
          }
          update: {
            args: Prisma.LojaUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LojaPayload>
          }
          deleteMany: {
            args: Prisma.LojaDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.LojaUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.LojaUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LojaPayload>
          }
          aggregate: {
            args: Prisma.LojaAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateLoja>
          }
          groupBy: {
            args: Prisma.LojaGroupByArgs<ExtArgs>,
            result: $Utils.Optional<LojaGroupByOutputType>[]
          }
          count: {
            args: Prisma.LojaCountArgs<ExtArgs>,
            result: $Utils.Optional<LojaCountAggregateOutputType> | number
          }
        }
      }
      Frota: {
        payload: Prisma.$FrotaPayload<ExtArgs>
        fields: Prisma.FrotaFieldRefs
        operations: {
          findUnique: {
            args: Prisma.FrotaFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FrotaPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.FrotaFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FrotaPayload>
          }
          findFirst: {
            args: Prisma.FrotaFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FrotaPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.FrotaFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FrotaPayload>
          }
          findMany: {
            args: Prisma.FrotaFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FrotaPayload>[]
          }
          create: {
            args: Prisma.FrotaCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FrotaPayload>
          }
          createMany: {
            args: Prisma.FrotaCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.FrotaDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FrotaPayload>
          }
          update: {
            args: Prisma.FrotaUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FrotaPayload>
          }
          deleteMany: {
            args: Prisma.FrotaDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.FrotaUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.FrotaUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FrotaPayload>
          }
          aggregate: {
            args: Prisma.FrotaAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateFrota>
          }
          groupBy: {
            args: Prisma.FrotaGroupByArgs<ExtArgs>,
            result: $Utils.Optional<FrotaGroupByOutputType>[]
          }
          count: {
            args: Prisma.FrotaCountArgs<ExtArgs>,
            result: $Utils.Optional<FrotaCountAggregateOutputType> | number
          }
        }
      }
      CarroLoja: {
        payload: Prisma.$CarroLojaPayload<ExtArgs>
        fields: Prisma.CarroLojaFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CarroLojaFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CarroLojaPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CarroLojaFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CarroLojaPayload>
          }
          findFirst: {
            args: Prisma.CarroLojaFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CarroLojaPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CarroLojaFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CarroLojaPayload>
          }
          findMany: {
            args: Prisma.CarroLojaFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CarroLojaPayload>[]
          }
          create: {
            args: Prisma.CarroLojaCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CarroLojaPayload>
          }
          createMany: {
            args: Prisma.CarroLojaCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.CarroLojaDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CarroLojaPayload>
          }
          update: {
            args: Prisma.CarroLojaUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CarroLojaPayload>
          }
          deleteMany: {
            args: Prisma.CarroLojaDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.CarroLojaUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.CarroLojaUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CarroLojaPayload>
          }
          aggregate: {
            args: Prisma.CarroLojaAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateCarroLoja>
          }
          groupBy: {
            args: Prisma.CarroLojaGroupByArgs<ExtArgs>,
            result: $Utils.Optional<CarroLojaGroupByOutputType>[]
          }
          count: {
            args: Prisma.CarroLojaCountArgs<ExtArgs>,
            result: $Utils.Optional<CarroLojaCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<'define', Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type LojaCountOutputType
   */

  export type LojaCountOutputType = {
    carrosLoja: number
  }

  export type LojaCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    carrosLoja?: boolean | LojaCountOutputTypeCountCarrosLojaArgs
  }

  // Custom InputTypes

  /**
   * LojaCountOutputType without action
   */
  export type LojaCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LojaCountOutputType
     */
    select?: LojaCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * LojaCountOutputType without action
   */
  export type LojaCountOutputTypeCountCarrosLojaArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CarroLojaWhereInput
  }



  /**
   * Count Type FrotaCountOutputType
   */

  export type FrotaCountOutputType = {
    carrosLoja: number
  }

  export type FrotaCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    carrosLoja?: boolean | FrotaCountOutputTypeCountCarrosLojaArgs
  }

  // Custom InputTypes

  /**
   * FrotaCountOutputType without action
   */
  export type FrotaCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FrotaCountOutputType
     */
    select?: FrotaCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * FrotaCountOutputType without action
   */
  export type FrotaCountOutputTypeCountCarrosLojaArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CarroLojaWhereInput
  }



  /**
   * Models
   */

  /**
   * Model Loja
   */

  export type AggregateLoja = {
    _count: LojaCountAggregateOutputType | null
    _avg: LojaAvgAggregateOutputType | null
    _sum: LojaSumAggregateOutputType | null
    _min: LojaMinAggregateOutputType | null
    _max: LojaMaxAggregateOutputType | null
  }

  export type LojaAvgAggregateOutputType = {
    id: number | null
  }

  export type LojaSumAggregateOutputType = {
    id: number | null
  }

  export type LojaMinAggregateOutputType = {
    id: number | null
    nome: string | null
    descricao: string | null
    technicalData: string | null
    imagem: string | null
  }

  export type LojaMaxAggregateOutputType = {
    id: number | null
    nome: string | null
    descricao: string | null
    technicalData: string | null
    imagem: string | null
  }

  export type LojaCountAggregateOutputType = {
    id: number
    nome: number
    descricao: number
    technicalData: number
    imagem: number
    _all: number
  }


  export type LojaAvgAggregateInputType = {
    id?: true
  }

  export type LojaSumAggregateInputType = {
    id?: true
  }

  export type LojaMinAggregateInputType = {
    id?: true
    nome?: true
    descricao?: true
    technicalData?: true
    imagem?: true
  }

  export type LojaMaxAggregateInputType = {
    id?: true
    nome?: true
    descricao?: true
    technicalData?: true
    imagem?: true
  }

  export type LojaCountAggregateInputType = {
    id?: true
    nome?: true
    descricao?: true
    technicalData?: true
    imagem?: true
    _all?: true
  }

  export type LojaAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Loja to aggregate.
     */
    where?: LojaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Lojas to fetch.
     */
    orderBy?: LojaOrderByWithRelationInput | LojaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: LojaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Lojas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Lojas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Lojas
    **/
    _count?: true | LojaCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: LojaAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: LojaSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: LojaMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: LojaMaxAggregateInputType
  }

  export type GetLojaAggregateType<T extends LojaAggregateArgs> = {
        [P in keyof T & keyof AggregateLoja]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateLoja[P]>
      : GetScalarType<T[P], AggregateLoja[P]>
  }




  export type LojaGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LojaWhereInput
    orderBy?: LojaOrderByWithAggregationInput | LojaOrderByWithAggregationInput[]
    by: LojaScalarFieldEnum[] | LojaScalarFieldEnum
    having?: LojaScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: LojaCountAggregateInputType | true
    _avg?: LojaAvgAggregateInputType
    _sum?: LojaSumAggregateInputType
    _min?: LojaMinAggregateInputType
    _max?: LojaMaxAggregateInputType
  }

  export type LojaGroupByOutputType = {
    id: number
    nome: string
    descricao: string
    technicalData: string
    imagem: string
    _count: LojaCountAggregateOutputType | null
    _avg: LojaAvgAggregateOutputType | null
    _sum: LojaSumAggregateOutputType | null
    _min: LojaMinAggregateOutputType | null
    _max: LojaMaxAggregateOutputType | null
  }

  type GetLojaGroupByPayload<T extends LojaGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<LojaGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof LojaGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], LojaGroupByOutputType[P]>
            : GetScalarType<T[P], LojaGroupByOutputType[P]>
        }
      >
    >


  export type LojaSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nome?: boolean
    descricao?: boolean
    technicalData?: boolean
    imagem?: boolean
    carrosLoja?: boolean | Loja$carrosLojaArgs<ExtArgs>
    _count?: boolean | LojaCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["loja"]>

  export type LojaSelectScalar = {
    id?: boolean
    nome?: boolean
    descricao?: boolean
    technicalData?: boolean
    imagem?: boolean
  }

  export type LojaInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    carrosLoja?: boolean | Loja$carrosLojaArgs<ExtArgs>
    _count?: boolean | LojaCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $LojaPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Loja"
    objects: {
      carrosLoja: Prisma.$CarroLojaPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      nome: string
      descricao: string
      technicalData: string
      imagem: string
    }, ExtArgs["result"]["loja"]>
    composites: {}
  }


  type LojaGetPayload<S extends boolean | null | undefined | LojaDefaultArgs> = $Result.GetResult<Prisma.$LojaPayload, S>

  type LojaCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<LojaFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: LojaCountAggregateInputType | true
    }

  export interface LojaDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Loja'], meta: { name: 'Loja' } }
    /**
     * Find zero or one Loja that matches the filter.
     * @param {LojaFindUniqueArgs} args - Arguments to find a Loja
     * @example
     * // Get one Loja
     * const loja = await prisma.loja.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends LojaFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, LojaFindUniqueArgs<ExtArgs>>
    ): Prisma__LojaClient<$Result.GetResult<Prisma.$LojaPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Loja that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {LojaFindUniqueOrThrowArgs} args - Arguments to find a Loja
     * @example
     * // Get one Loja
     * const loja = await prisma.loja.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends LojaFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, LojaFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__LojaClient<$Result.GetResult<Prisma.$LojaPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Loja that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LojaFindFirstArgs} args - Arguments to find a Loja
     * @example
     * // Get one Loja
     * const loja = await prisma.loja.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends LojaFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, LojaFindFirstArgs<ExtArgs>>
    ): Prisma__LojaClient<$Result.GetResult<Prisma.$LojaPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Loja that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LojaFindFirstOrThrowArgs} args - Arguments to find a Loja
     * @example
     * // Get one Loja
     * const loja = await prisma.loja.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends LojaFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, LojaFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__LojaClient<$Result.GetResult<Prisma.$LojaPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Lojas that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LojaFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Lojas
     * const lojas = await prisma.loja.findMany()
     * 
     * // Get first 10 Lojas
     * const lojas = await prisma.loja.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const lojaWithIdOnly = await prisma.loja.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends LojaFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, LojaFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LojaPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Loja.
     * @param {LojaCreateArgs} args - Arguments to create a Loja.
     * @example
     * // Create one Loja
     * const Loja = await prisma.loja.create({
     *   data: {
     *     // ... data to create a Loja
     *   }
     * })
     * 
    **/
    create<T extends LojaCreateArgs<ExtArgs>>(
      args: SelectSubset<T, LojaCreateArgs<ExtArgs>>
    ): Prisma__LojaClient<$Result.GetResult<Prisma.$LojaPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Lojas.
     *     @param {LojaCreateManyArgs} args - Arguments to create many Lojas.
     *     @example
     *     // Create many Lojas
     *     const loja = await prisma.loja.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends LojaCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, LojaCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Loja.
     * @param {LojaDeleteArgs} args - Arguments to delete one Loja.
     * @example
     * // Delete one Loja
     * const Loja = await prisma.loja.delete({
     *   where: {
     *     // ... filter to delete one Loja
     *   }
     * })
     * 
    **/
    delete<T extends LojaDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, LojaDeleteArgs<ExtArgs>>
    ): Prisma__LojaClient<$Result.GetResult<Prisma.$LojaPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Loja.
     * @param {LojaUpdateArgs} args - Arguments to update one Loja.
     * @example
     * // Update one Loja
     * const loja = await prisma.loja.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends LojaUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, LojaUpdateArgs<ExtArgs>>
    ): Prisma__LojaClient<$Result.GetResult<Prisma.$LojaPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Lojas.
     * @param {LojaDeleteManyArgs} args - Arguments to filter Lojas to delete.
     * @example
     * // Delete a few Lojas
     * const { count } = await prisma.loja.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends LojaDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, LojaDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Lojas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LojaUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Lojas
     * const loja = await prisma.loja.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends LojaUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, LojaUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Loja.
     * @param {LojaUpsertArgs} args - Arguments to update or create a Loja.
     * @example
     * // Update or create a Loja
     * const loja = await prisma.loja.upsert({
     *   create: {
     *     // ... data to create a Loja
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Loja we want to update
     *   }
     * })
    **/
    upsert<T extends LojaUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, LojaUpsertArgs<ExtArgs>>
    ): Prisma__LojaClient<$Result.GetResult<Prisma.$LojaPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Lojas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LojaCountArgs} args - Arguments to filter Lojas to count.
     * @example
     * // Count the number of Lojas
     * const count = await prisma.loja.count({
     *   where: {
     *     // ... the filter for the Lojas we want to count
     *   }
     * })
    **/
    count<T extends LojaCountArgs>(
      args?: Subset<T, LojaCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], LojaCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Loja.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LojaAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends LojaAggregateArgs>(args: Subset<T, LojaAggregateArgs>): Prisma.PrismaPromise<GetLojaAggregateType<T>>

    /**
     * Group by Loja.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LojaGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends LojaGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: LojaGroupByArgs['orderBy'] }
        : { orderBy?: LojaGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, LojaGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetLojaGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Loja model
   */
  readonly fields: LojaFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Loja.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__LojaClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    carrosLoja<T extends Loja$carrosLojaArgs<ExtArgs> = {}>(args?: Subset<T, Loja$carrosLojaArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CarroLojaPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Loja model
   */ 
  interface LojaFieldRefs {
    readonly id: FieldRef<"Loja", 'Int'>
    readonly nome: FieldRef<"Loja", 'String'>
    readonly descricao: FieldRef<"Loja", 'String'>
    readonly technicalData: FieldRef<"Loja", 'String'>
    readonly imagem: FieldRef<"Loja", 'String'>
  }
    

  // Custom InputTypes

  /**
   * Loja findUnique
   */
  export type LojaFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Loja
     */
    select?: LojaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LojaInclude<ExtArgs> | null
    /**
     * Filter, which Loja to fetch.
     */
    where: LojaWhereUniqueInput
  }


  /**
   * Loja findUniqueOrThrow
   */
  export type LojaFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Loja
     */
    select?: LojaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LojaInclude<ExtArgs> | null
    /**
     * Filter, which Loja to fetch.
     */
    where: LojaWhereUniqueInput
  }


  /**
   * Loja findFirst
   */
  export type LojaFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Loja
     */
    select?: LojaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LojaInclude<ExtArgs> | null
    /**
     * Filter, which Loja to fetch.
     */
    where?: LojaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Lojas to fetch.
     */
    orderBy?: LojaOrderByWithRelationInput | LojaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Lojas.
     */
    cursor?: LojaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Lojas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Lojas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Lojas.
     */
    distinct?: LojaScalarFieldEnum | LojaScalarFieldEnum[]
  }


  /**
   * Loja findFirstOrThrow
   */
  export type LojaFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Loja
     */
    select?: LojaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LojaInclude<ExtArgs> | null
    /**
     * Filter, which Loja to fetch.
     */
    where?: LojaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Lojas to fetch.
     */
    orderBy?: LojaOrderByWithRelationInput | LojaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Lojas.
     */
    cursor?: LojaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Lojas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Lojas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Lojas.
     */
    distinct?: LojaScalarFieldEnum | LojaScalarFieldEnum[]
  }


  /**
   * Loja findMany
   */
  export type LojaFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Loja
     */
    select?: LojaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LojaInclude<ExtArgs> | null
    /**
     * Filter, which Lojas to fetch.
     */
    where?: LojaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Lojas to fetch.
     */
    orderBy?: LojaOrderByWithRelationInput | LojaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Lojas.
     */
    cursor?: LojaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Lojas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Lojas.
     */
    skip?: number
    distinct?: LojaScalarFieldEnum | LojaScalarFieldEnum[]
  }


  /**
   * Loja create
   */
  export type LojaCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Loja
     */
    select?: LojaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LojaInclude<ExtArgs> | null
    /**
     * The data needed to create a Loja.
     */
    data: XOR<LojaCreateInput, LojaUncheckedCreateInput>
  }


  /**
   * Loja createMany
   */
  export type LojaCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Lojas.
     */
    data: LojaCreateManyInput | LojaCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Loja update
   */
  export type LojaUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Loja
     */
    select?: LojaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LojaInclude<ExtArgs> | null
    /**
     * The data needed to update a Loja.
     */
    data: XOR<LojaUpdateInput, LojaUncheckedUpdateInput>
    /**
     * Choose, which Loja to update.
     */
    where: LojaWhereUniqueInput
  }


  /**
   * Loja updateMany
   */
  export type LojaUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Lojas.
     */
    data: XOR<LojaUpdateManyMutationInput, LojaUncheckedUpdateManyInput>
    /**
     * Filter which Lojas to update
     */
    where?: LojaWhereInput
  }


  /**
   * Loja upsert
   */
  export type LojaUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Loja
     */
    select?: LojaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LojaInclude<ExtArgs> | null
    /**
     * The filter to search for the Loja to update in case it exists.
     */
    where: LojaWhereUniqueInput
    /**
     * In case the Loja found by the `where` argument doesn't exist, create a new Loja with this data.
     */
    create: XOR<LojaCreateInput, LojaUncheckedCreateInput>
    /**
     * In case the Loja was found with the provided `where` argument, update it with this data.
     */
    update: XOR<LojaUpdateInput, LojaUncheckedUpdateInput>
  }


  /**
   * Loja delete
   */
  export type LojaDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Loja
     */
    select?: LojaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LojaInclude<ExtArgs> | null
    /**
     * Filter which Loja to delete.
     */
    where: LojaWhereUniqueInput
  }


  /**
   * Loja deleteMany
   */
  export type LojaDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Lojas to delete
     */
    where?: LojaWhereInput
  }


  /**
   * Loja.carrosLoja
   */
  export type Loja$carrosLojaArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CarroLoja
     */
    select?: CarroLojaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CarroLojaInclude<ExtArgs> | null
    where?: CarroLojaWhereInput
    orderBy?: CarroLojaOrderByWithRelationInput | CarroLojaOrderByWithRelationInput[]
    cursor?: CarroLojaWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CarroLojaScalarFieldEnum | CarroLojaScalarFieldEnum[]
  }


  /**
   * Loja without action
   */
  export type LojaDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Loja
     */
    select?: LojaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LojaInclude<ExtArgs> | null
  }



  /**
   * Model Frota
   */

  export type AggregateFrota = {
    _count: FrotaCountAggregateOutputType | null
    _avg: FrotaAvgAggregateOutputType | null
    _sum: FrotaSumAggregateOutputType | null
    _min: FrotaMinAggregateOutputType | null
    _max: FrotaMaxAggregateOutputType | null
  }

  export type FrotaAvgAggregateOutputType = {
    id: number | null
  }

  export type FrotaSumAggregateOutputType = {
    id: number | null
  }

  export type FrotaMinAggregateOutputType = {
    id: number | null
    nome: string | null
    descricao: string | null
    technicalData: string | null
    imagem: string | null
  }

  export type FrotaMaxAggregateOutputType = {
    id: number | null
    nome: string | null
    descricao: string | null
    technicalData: string | null
    imagem: string | null
  }

  export type FrotaCountAggregateOutputType = {
    id: number
    nome: number
    descricao: number
    technicalData: number
    imagem: number
    _all: number
  }


  export type FrotaAvgAggregateInputType = {
    id?: true
  }

  export type FrotaSumAggregateInputType = {
    id?: true
  }

  export type FrotaMinAggregateInputType = {
    id?: true
    nome?: true
    descricao?: true
    technicalData?: true
    imagem?: true
  }

  export type FrotaMaxAggregateInputType = {
    id?: true
    nome?: true
    descricao?: true
    technicalData?: true
    imagem?: true
  }

  export type FrotaCountAggregateInputType = {
    id?: true
    nome?: true
    descricao?: true
    technicalData?: true
    imagem?: true
    _all?: true
  }

  export type FrotaAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Frota to aggregate.
     */
    where?: FrotaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Frotas to fetch.
     */
    orderBy?: FrotaOrderByWithRelationInput | FrotaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: FrotaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Frotas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Frotas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Frotas
    **/
    _count?: true | FrotaCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: FrotaAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: FrotaSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FrotaMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FrotaMaxAggregateInputType
  }

  export type GetFrotaAggregateType<T extends FrotaAggregateArgs> = {
        [P in keyof T & keyof AggregateFrota]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFrota[P]>
      : GetScalarType<T[P], AggregateFrota[P]>
  }




  export type FrotaGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FrotaWhereInput
    orderBy?: FrotaOrderByWithAggregationInput | FrotaOrderByWithAggregationInput[]
    by: FrotaScalarFieldEnum[] | FrotaScalarFieldEnum
    having?: FrotaScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FrotaCountAggregateInputType | true
    _avg?: FrotaAvgAggregateInputType
    _sum?: FrotaSumAggregateInputType
    _min?: FrotaMinAggregateInputType
    _max?: FrotaMaxAggregateInputType
  }

  export type FrotaGroupByOutputType = {
    id: number
    nome: string
    descricao: string
    technicalData: string
    imagem: string
    _count: FrotaCountAggregateOutputType | null
    _avg: FrotaAvgAggregateOutputType | null
    _sum: FrotaSumAggregateOutputType | null
    _min: FrotaMinAggregateOutputType | null
    _max: FrotaMaxAggregateOutputType | null
  }

  type GetFrotaGroupByPayload<T extends FrotaGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<FrotaGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FrotaGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FrotaGroupByOutputType[P]>
            : GetScalarType<T[P], FrotaGroupByOutputType[P]>
        }
      >
    >


  export type FrotaSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nome?: boolean
    descricao?: boolean
    technicalData?: boolean
    imagem?: boolean
    carrosLoja?: boolean | Frota$carrosLojaArgs<ExtArgs>
    _count?: boolean | FrotaCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["frota"]>

  export type FrotaSelectScalar = {
    id?: boolean
    nome?: boolean
    descricao?: boolean
    technicalData?: boolean
    imagem?: boolean
  }

  export type FrotaInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    carrosLoja?: boolean | Frota$carrosLojaArgs<ExtArgs>
    _count?: boolean | FrotaCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $FrotaPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Frota"
    objects: {
      carrosLoja: Prisma.$CarroLojaPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      nome: string
      descricao: string
      technicalData: string
      imagem: string
    }, ExtArgs["result"]["frota"]>
    composites: {}
  }


  type FrotaGetPayload<S extends boolean | null | undefined | FrotaDefaultArgs> = $Result.GetResult<Prisma.$FrotaPayload, S>

  type FrotaCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<FrotaFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: FrotaCountAggregateInputType | true
    }

  export interface FrotaDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Frota'], meta: { name: 'Frota' } }
    /**
     * Find zero or one Frota that matches the filter.
     * @param {FrotaFindUniqueArgs} args - Arguments to find a Frota
     * @example
     * // Get one Frota
     * const frota = await prisma.frota.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends FrotaFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, FrotaFindUniqueArgs<ExtArgs>>
    ): Prisma__FrotaClient<$Result.GetResult<Prisma.$FrotaPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Frota that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {FrotaFindUniqueOrThrowArgs} args - Arguments to find a Frota
     * @example
     * // Get one Frota
     * const frota = await prisma.frota.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends FrotaFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, FrotaFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__FrotaClient<$Result.GetResult<Prisma.$FrotaPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Frota that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FrotaFindFirstArgs} args - Arguments to find a Frota
     * @example
     * // Get one Frota
     * const frota = await prisma.frota.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends FrotaFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, FrotaFindFirstArgs<ExtArgs>>
    ): Prisma__FrotaClient<$Result.GetResult<Prisma.$FrotaPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Frota that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FrotaFindFirstOrThrowArgs} args - Arguments to find a Frota
     * @example
     * // Get one Frota
     * const frota = await prisma.frota.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends FrotaFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, FrotaFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__FrotaClient<$Result.GetResult<Prisma.$FrotaPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Frotas that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FrotaFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Frotas
     * const frotas = await prisma.frota.findMany()
     * 
     * // Get first 10 Frotas
     * const frotas = await prisma.frota.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const frotaWithIdOnly = await prisma.frota.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends FrotaFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, FrotaFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FrotaPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Frota.
     * @param {FrotaCreateArgs} args - Arguments to create a Frota.
     * @example
     * // Create one Frota
     * const Frota = await prisma.frota.create({
     *   data: {
     *     // ... data to create a Frota
     *   }
     * })
     * 
    **/
    create<T extends FrotaCreateArgs<ExtArgs>>(
      args: SelectSubset<T, FrotaCreateArgs<ExtArgs>>
    ): Prisma__FrotaClient<$Result.GetResult<Prisma.$FrotaPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Frotas.
     *     @param {FrotaCreateManyArgs} args - Arguments to create many Frotas.
     *     @example
     *     // Create many Frotas
     *     const frota = await prisma.frota.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends FrotaCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, FrotaCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Frota.
     * @param {FrotaDeleteArgs} args - Arguments to delete one Frota.
     * @example
     * // Delete one Frota
     * const Frota = await prisma.frota.delete({
     *   where: {
     *     // ... filter to delete one Frota
     *   }
     * })
     * 
    **/
    delete<T extends FrotaDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, FrotaDeleteArgs<ExtArgs>>
    ): Prisma__FrotaClient<$Result.GetResult<Prisma.$FrotaPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Frota.
     * @param {FrotaUpdateArgs} args - Arguments to update one Frota.
     * @example
     * // Update one Frota
     * const frota = await prisma.frota.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends FrotaUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, FrotaUpdateArgs<ExtArgs>>
    ): Prisma__FrotaClient<$Result.GetResult<Prisma.$FrotaPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Frotas.
     * @param {FrotaDeleteManyArgs} args - Arguments to filter Frotas to delete.
     * @example
     * // Delete a few Frotas
     * const { count } = await prisma.frota.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends FrotaDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, FrotaDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Frotas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FrotaUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Frotas
     * const frota = await prisma.frota.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends FrotaUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, FrotaUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Frota.
     * @param {FrotaUpsertArgs} args - Arguments to update or create a Frota.
     * @example
     * // Update or create a Frota
     * const frota = await prisma.frota.upsert({
     *   create: {
     *     // ... data to create a Frota
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Frota we want to update
     *   }
     * })
    **/
    upsert<T extends FrotaUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, FrotaUpsertArgs<ExtArgs>>
    ): Prisma__FrotaClient<$Result.GetResult<Prisma.$FrotaPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Frotas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FrotaCountArgs} args - Arguments to filter Frotas to count.
     * @example
     * // Count the number of Frotas
     * const count = await prisma.frota.count({
     *   where: {
     *     // ... the filter for the Frotas we want to count
     *   }
     * })
    **/
    count<T extends FrotaCountArgs>(
      args?: Subset<T, FrotaCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FrotaCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Frota.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FrotaAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FrotaAggregateArgs>(args: Subset<T, FrotaAggregateArgs>): Prisma.PrismaPromise<GetFrotaAggregateType<T>>

    /**
     * Group by Frota.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FrotaGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FrotaGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FrotaGroupByArgs['orderBy'] }
        : { orderBy?: FrotaGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FrotaGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFrotaGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Frota model
   */
  readonly fields: FrotaFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Frota.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__FrotaClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    carrosLoja<T extends Frota$carrosLojaArgs<ExtArgs> = {}>(args?: Subset<T, Frota$carrosLojaArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CarroLojaPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Frota model
   */ 
  interface FrotaFieldRefs {
    readonly id: FieldRef<"Frota", 'Int'>
    readonly nome: FieldRef<"Frota", 'String'>
    readonly descricao: FieldRef<"Frota", 'String'>
    readonly technicalData: FieldRef<"Frota", 'String'>
    readonly imagem: FieldRef<"Frota", 'String'>
  }
    

  // Custom InputTypes

  /**
   * Frota findUnique
   */
  export type FrotaFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Frota
     */
    select?: FrotaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FrotaInclude<ExtArgs> | null
    /**
     * Filter, which Frota to fetch.
     */
    where: FrotaWhereUniqueInput
  }


  /**
   * Frota findUniqueOrThrow
   */
  export type FrotaFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Frota
     */
    select?: FrotaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FrotaInclude<ExtArgs> | null
    /**
     * Filter, which Frota to fetch.
     */
    where: FrotaWhereUniqueInput
  }


  /**
   * Frota findFirst
   */
  export type FrotaFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Frota
     */
    select?: FrotaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FrotaInclude<ExtArgs> | null
    /**
     * Filter, which Frota to fetch.
     */
    where?: FrotaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Frotas to fetch.
     */
    orderBy?: FrotaOrderByWithRelationInput | FrotaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Frotas.
     */
    cursor?: FrotaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Frotas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Frotas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Frotas.
     */
    distinct?: FrotaScalarFieldEnum | FrotaScalarFieldEnum[]
  }


  /**
   * Frota findFirstOrThrow
   */
  export type FrotaFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Frota
     */
    select?: FrotaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FrotaInclude<ExtArgs> | null
    /**
     * Filter, which Frota to fetch.
     */
    where?: FrotaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Frotas to fetch.
     */
    orderBy?: FrotaOrderByWithRelationInput | FrotaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Frotas.
     */
    cursor?: FrotaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Frotas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Frotas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Frotas.
     */
    distinct?: FrotaScalarFieldEnum | FrotaScalarFieldEnum[]
  }


  /**
   * Frota findMany
   */
  export type FrotaFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Frota
     */
    select?: FrotaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FrotaInclude<ExtArgs> | null
    /**
     * Filter, which Frotas to fetch.
     */
    where?: FrotaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Frotas to fetch.
     */
    orderBy?: FrotaOrderByWithRelationInput | FrotaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Frotas.
     */
    cursor?: FrotaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Frotas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Frotas.
     */
    skip?: number
    distinct?: FrotaScalarFieldEnum | FrotaScalarFieldEnum[]
  }


  /**
   * Frota create
   */
  export type FrotaCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Frota
     */
    select?: FrotaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FrotaInclude<ExtArgs> | null
    /**
     * The data needed to create a Frota.
     */
    data: XOR<FrotaCreateInput, FrotaUncheckedCreateInput>
  }


  /**
   * Frota createMany
   */
  export type FrotaCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Frotas.
     */
    data: FrotaCreateManyInput | FrotaCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Frota update
   */
  export type FrotaUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Frota
     */
    select?: FrotaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FrotaInclude<ExtArgs> | null
    /**
     * The data needed to update a Frota.
     */
    data: XOR<FrotaUpdateInput, FrotaUncheckedUpdateInput>
    /**
     * Choose, which Frota to update.
     */
    where: FrotaWhereUniqueInput
  }


  /**
   * Frota updateMany
   */
  export type FrotaUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Frotas.
     */
    data: XOR<FrotaUpdateManyMutationInput, FrotaUncheckedUpdateManyInput>
    /**
     * Filter which Frotas to update
     */
    where?: FrotaWhereInput
  }


  /**
   * Frota upsert
   */
  export type FrotaUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Frota
     */
    select?: FrotaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FrotaInclude<ExtArgs> | null
    /**
     * The filter to search for the Frota to update in case it exists.
     */
    where: FrotaWhereUniqueInput
    /**
     * In case the Frota found by the `where` argument doesn't exist, create a new Frota with this data.
     */
    create: XOR<FrotaCreateInput, FrotaUncheckedCreateInput>
    /**
     * In case the Frota was found with the provided `where` argument, update it with this data.
     */
    update: XOR<FrotaUpdateInput, FrotaUncheckedUpdateInput>
  }


  /**
   * Frota delete
   */
  export type FrotaDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Frota
     */
    select?: FrotaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FrotaInclude<ExtArgs> | null
    /**
     * Filter which Frota to delete.
     */
    where: FrotaWhereUniqueInput
  }


  /**
   * Frota deleteMany
   */
  export type FrotaDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Frotas to delete
     */
    where?: FrotaWhereInput
  }


  /**
   * Frota.carrosLoja
   */
  export type Frota$carrosLojaArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CarroLoja
     */
    select?: CarroLojaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CarroLojaInclude<ExtArgs> | null
    where?: CarroLojaWhereInput
    orderBy?: CarroLojaOrderByWithRelationInput | CarroLojaOrderByWithRelationInput[]
    cursor?: CarroLojaWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CarroLojaScalarFieldEnum | CarroLojaScalarFieldEnum[]
  }


  /**
   * Frota without action
   */
  export type FrotaDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Frota
     */
    select?: FrotaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FrotaInclude<ExtArgs> | null
  }



  /**
   * Model CarroLoja
   */

  export type AggregateCarroLoja = {
    _count: CarroLojaCountAggregateOutputType | null
    _avg: CarroLojaAvgAggregateOutputType | null
    _sum: CarroLojaSumAggregateOutputType | null
    _min: CarroLojaMinAggregateOutputType | null
    _max: CarroLojaMaxAggregateOutputType | null
  }

  export type CarroLojaAvgAggregateOutputType = {
    id: number | null
    lojaId: number | null
    carroId: number | null
  }

  export type CarroLojaSumAggregateOutputType = {
    id: number | null
    lojaId: number | null
    carroId: number | null
  }

  export type CarroLojaMinAggregateOutputType = {
    id: number | null
    lojaId: number | null
    carroId: number | null
  }

  export type CarroLojaMaxAggregateOutputType = {
    id: number | null
    lojaId: number | null
    carroId: number | null
  }

  export type CarroLojaCountAggregateOutputType = {
    id: number
    lojaId: number
    carroId: number
    _all: number
  }


  export type CarroLojaAvgAggregateInputType = {
    id?: true
    lojaId?: true
    carroId?: true
  }

  export type CarroLojaSumAggregateInputType = {
    id?: true
    lojaId?: true
    carroId?: true
  }

  export type CarroLojaMinAggregateInputType = {
    id?: true
    lojaId?: true
    carroId?: true
  }

  export type CarroLojaMaxAggregateInputType = {
    id?: true
    lojaId?: true
    carroId?: true
  }

  export type CarroLojaCountAggregateInputType = {
    id?: true
    lojaId?: true
    carroId?: true
    _all?: true
  }

  export type CarroLojaAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CarroLoja to aggregate.
     */
    where?: CarroLojaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CarroLojas to fetch.
     */
    orderBy?: CarroLojaOrderByWithRelationInput | CarroLojaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CarroLojaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CarroLojas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CarroLojas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned CarroLojas
    **/
    _count?: true | CarroLojaCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CarroLojaAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CarroLojaSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CarroLojaMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CarroLojaMaxAggregateInputType
  }

  export type GetCarroLojaAggregateType<T extends CarroLojaAggregateArgs> = {
        [P in keyof T & keyof AggregateCarroLoja]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCarroLoja[P]>
      : GetScalarType<T[P], AggregateCarroLoja[P]>
  }




  export type CarroLojaGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CarroLojaWhereInput
    orderBy?: CarroLojaOrderByWithAggregationInput | CarroLojaOrderByWithAggregationInput[]
    by: CarroLojaScalarFieldEnum[] | CarroLojaScalarFieldEnum
    having?: CarroLojaScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CarroLojaCountAggregateInputType | true
    _avg?: CarroLojaAvgAggregateInputType
    _sum?: CarroLojaSumAggregateInputType
    _min?: CarroLojaMinAggregateInputType
    _max?: CarroLojaMaxAggregateInputType
  }

  export type CarroLojaGroupByOutputType = {
    id: number
    lojaId: number
    carroId: number
    _count: CarroLojaCountAggregateOutputType | null
    _avg: CarroLojaAvgAggregateOutputType | null
    _sum: CarroLojaSumAggregateOutputType | null
    _min: CarroLojaMinAggregateOutputType | null
    _max: CarroLojaMaxAggregateOutputType | null
  }

  type GetCarroLojaGroupByPayload<T extends CarroLojaGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CarroLojaGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CarroLojaGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CarroLojaGroupByOutputType[P]>
            : GetScalarType<T[P], CarroLojaGroupByOutputType[P]>
        }
      >
    >


  export type CarroLojaSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    lojaId?: boolean
    carroId?: boolean
    loja?: boolean | LojaDefaultArgs<ExtArgs>
    carro?: boolean | FrotaDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["carroLoja"]>

  export type CarroLojaSelectScalar = {
    id?: boolean
    lojaId?: boolean
    carroId?: boolean
  }

  export type CarroLojaInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    loja?: boolean | LojaDefaultArgs<ExtArgs>
    carro?: boolean | FrotaDefaultArgs<ExtArgs>
  }


  export type $CarroLojaPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "CarroLoja"
    objects: {
      loja: Prisma.$LojaPayload<ExtArgs>
      carro: Prisma.$FrotaPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      lojaId: number
      carroId: number
    }, ExtArgs["result"]["carroLoja"]>
    composites: {}
  }


  type CarroLojaGetPayload<S extends boolean | null | undefined | CarroLojaDefaultArgs> = $Result.GetResult<Prisma.$CarroLojaPayload, S>

  type CarroLojaCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<CarroLojaFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: CarroLojaCountAggregateInputType | true
    }

  export interface CarroLojaDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['CarroLoja'], meta: { name: 'CarroLoja' } }
    /**
     * Find zero or one CarroLoja that matches the filter.
     * @param {CarroLojaFindUniqueArgs} args - Arguments to find a CarroLoja
     * @example
     * // Get one CarroLoja
     * const carroLoja = await prisma.carroLoja.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends CarroLojaFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, CarroLojaFindUniqueArgs<ExtArgs>>
    ): Prisma__CarroLojaClient<$Result.GetResult<Prisma.$CarroLojaPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one CarroLoja that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {CarroLojaFindUniqueOrThrowArgs} args - Arguments to find a CarroLoja
     * @example
     * // Get one CarroLoja
     * const carroLoja = await prisma.carroLoja.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends CarroLojaFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, CarroLojaFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__CarroLojaClient<$Result.GetResult<Prisma.$CarroLojaPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first CarroLoja that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CarroLojaFindFirstArgs} args - Arguments to find a CarroLoja
     * @example
     * // Get one CarroLoja
     * const carroLoja = await prisma.carroLoja.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends CarroLojaFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, CarroLojaFindFirstArgs<ExtArgs>>
    ): Prisma__CarroLojaClient<$Result.GetResult<Prisma.$CarroLojaPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first CarroLoja that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CarroLojaFindFirstOrThrowArgs} args - Arguments to find a CarroLoja
     * @example
     * // Get one CarroLoja
     * const carroLoja = await prisma.carroLoja.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends CarroLojaFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, CarroLojaFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__CarroLojaClient<$Result.GetResult<Prisma.$CarroLojaPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more CarroLojas that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CarroLojaFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all CarroLojas
     * const carroLojas = await prisma.carroLoja.findMany()
     * 
     * // Get first 10 CarroLojas
     * const carroLojas = await prisma.carroLoja.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const carroLojaWithIdOnly = await prisma.carroLoja.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends CarroLojaFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CarroLojaFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CarroLojaPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a CarroLoja.
     * @param {CarroLojaCreateArgs} args - Arguments to create a CarroLoja.
     * @example
     * // Create one CarroLoja
     * const CarroLoja = await prisma.carroLoja.create({
     *   data: {
     *     // ... data to create a CarroLoja
     *   }
     * })
     * 
    **/
    create<T extends CarroLojaCreateArgs<ExtArgs>>(
      args: SelectSubset<T, CarroLojaCreateArgs<ExtArgs>>
    ): Prisma__CarroLojaClient<$Result.GetResult<Prisma.$CarroLojaPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many CarroLojas.
     *     @param {CarroLojaCreateManyArgs} args - Arguments to create many CarroLojas.
     *     @example
     *     // Create many CarroLojas
     *     const carroLoja = await prisma.carroLoja.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends CarroLojaCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CarroLojaCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a CarroLoja.
     * @param {CarroLojaDeleteArgs} args - Arguments to delete one CarroLoja.
     * @example
     * // Delete one CarroLoja
     * const CarroLoja = await prisma.carroLoja.delete({
     *   where: {
     *     // ... filter to delete one CarroLoja
     *   }
     * })
     * 
    **/
    delete<T extends CarroLojaDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, CarroLojaDeleteArgs<ExtArgs>>
    ): Prisma__CarroLojaClient<$Result.GetResult<Prisma.$CarroLojaPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one CarroLoja.
     * @param {CarroLojaUpdateArgs} args - Arguments to update one CarroLoja.
     * @example
     * // Update one CarroLoja
     * const carroLoja = await prisma.carroLoja.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends CarroLojaUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, CarroLojaUpdateArgs<ExtArgs>>
    ): Prisma__CarroLojaClient<$Result.GetResult<Prisma.$CarroLojaPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more CarroLojas.
     * @param {CarroLojaDeleteManyArgs} args - Arguments to filter CarroLojas to delete.
     * @example
     * // Delete a few CarroLojas
     * const { count } = await prisma.carroLoja.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends CarroLojaDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CarroLojaDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CarroLojas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CarroLojaUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many CarroLojas
     * const carroLoja = await prisma.carroLoja.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends CarroLojaUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, CarroLojaUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one CarroLoja.
     * @param {CarroLojaUpsertArgs} args - Arguments to update or create a CarroLoja.
     * @example
     * // Update or create a CarroLoja
     * const carroLoja = await prisma.carroLoja.upsert({
     *   create: {
     *     // ... data to create a CarroLoja
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the CarroLoja we want to update
     *   }
     * })
    **/
    upsert<T extends CarroLojaUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, CarroLojaUpsertArgs<ExtArgs>>
    ): Prisma__CarroLojaClient<$Result.GetResult<Prisma.$CarroLojaPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of CarroLojas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CarroLojaCountArgs} args - Arguments to filter CarroLojas to count.
     * @example
     * // Count the number of CarroLojas
     * const count = await prisma.carroLoja.count({
     *   where: {
     *     // ... the filter for the CarroLojas we want to count
     *   }
     * })
    **/
    count<T extends CarroLojaCountArgs>(
      args?: Subset<T, CarroLojaCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CarroLojaCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a CarroLoja.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CarroLojaAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CarroLojaAggregateArgs>(args: Subset<T, CarroLojaAggregateArgs>): Prisma.PrismaPromise<GetCarroLojaAggregateType<T>>

    /**
     * Group by CarroLoja.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CarroLojaGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CarroLojaGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CarroLojaGroupByArgs['orderBy'] }
        : { orderBy?: CarroLojaGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CarroLojaGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCarroLojaGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the CarroLoja model
   */
  readonly fields: CarroLojaFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for CarroLoja.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CarroLojaClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    loja<T extends LojaDefaultArgs<ExtArgs> = {}>(args?: Subset<T, LojaDefaultArgs<ExtArgs>>): Prisma__LojaClient<$Result.GetResult<Prisma.$LojaPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    carro<T extends FrotaDefaultArgs<ExtArgs> = {}>(args?: Subset<T, FrotaDefaultArgs<ExtArgs>>): Prisma__FrotaClient<$Result.GetResult<Prisma.$FrotaPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the CarroLoja model
   */ 
  interface CarroLojaFieldRefs {
    readonly id: FieldRef<"CarroLoja", 'Int'>
    readonly lojaId: FieldRef<"CarroLoja", 'Int'>
    readonly carroId: FieldRef<"CarroLoja", 'Int'>
  }
    

  // Custom InputTypes

  /**
   * CarroLoja findUnique
   */
  export type CarroLojaFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CarroLoja
     */
    select?: CarroLojaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CarroLojaInclude<ExtArgs> | null
    /**
     * Filter, which CarroLoja to fetch.
     */
    where: CarroLojaWhereUniqueInput
  }


  /**
   * CarroLoja findUniqueOrThrow
   */
  export type CarroLojaFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CarroLoja
     */
    select?: CarroLojaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CarroLojaInclude<ExtArgs> | null
    /**
     * Filter, which CarroLoja to fetch.
     */
    where: CarroLojaWhereUniqueInput
  }


  /**
   * CarroLoja findFirst
   */
  export type CarroLojaFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CarroLoja
     */
    select?: CarroLojaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CarroLojaInclude<ExtArgs> | null
    /**
     * Filter, which CarroLoja to fetch.
     */
    where?: CarroLojaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CarroLojas to fetch.
     */
    orderBy?: CarroLojaOrderByWithRelationInput | CarroLojaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CarroLojas.
     */
    cursor?: CarroLojaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CarroLojas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CarroLojas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CarroLojas.
     */
    distinct?: CarroLojaScalarFieldEnum | CarroLojaScalarFieldEnum[]
  }


  /**
   * CarroLoja findFirstOrThrow
   */
  export type CarroLojaFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CarroLoja
     */
    select?: CarroLojaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CarroLojaInclude<ExtArgs> | null
    /**
     * Filter, which CarroLoja to fetch.
     */
    where?: CarroLojaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CarroLojas to fetch.
     */
    orderBy?: CarroLojaOrderByWithRelationInput | CarroLojaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CarroLojas.
     */
    cursor?: CarroLojaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CarroLojas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CarroLojas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CarroLojas.
     */
    distinct?: CarroLojaScalarFieldEnum | CarroLojaScalarFieldEnum[]
  }


  /**
   * CarroLoja findMany
   */
  export type CarroLojaFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CarroLoja
     */
    select?: CarroLojaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CarroLojaInclude<ExtArgs> | null
    /**
     * Filter, which CarroLojas to fetch.
     */
    where?: CarroLojaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CarroLojas to fetch.
     */
    orderBy?: CarroLojaOrderByWithRelationInput | CarroLojaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing CarroLojas.
     */
    cursor?: CarroLojaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CarroLojas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CarroLojas.
     */
    skip?: number
    distinct?: CarroLojaScalarFieldEnum | CarroLojaScalarFieldEnum[]
  }


  /**
   * CarroLoja create
   */
  export type CarroLojaCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CarroLoja
     */
    select?: CarroLojaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CarroLojaInclude<ExtArgs> | null
    /**
     * The data needed to create a CarroLoja.
     */
    data: XOR<CarroLojaCreateInput, CarroLojaUncheckedCreateInput>
  }


  /**
   * CarroLoja createMany
   */
  export type CarroLojaCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many CarroLojas.
     */
    data: CarroLojaCreateManyInput | CarroLojaCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * CarroLoja update
   */
  export type CarroLojaUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CarroLoja
     */
    select?: CarroLojaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CarroLojaInclude<ExtArgs> | null
    /**
     * The data needed to update a CarroLoja.
     */
    data: XOR<CarroLojaUpdateInput, CarroLojaUncheckedUpdateInput>
    /**
     * Choose, which CarroLoja to update.
     */
    where: CarroLojaWhereUniqueInput
  }


  /**
   * CarroLoja updateMany
   */
  export type CarroLojaUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update CarroLojas.
     */
    data: XOR<CarroLojaUpdateManyMutationInput, CarroLojaUncheckedUpdateManyInput>
    /**
     * Filter which CarroLojas to update
     */
    where?: CarroLojaWhereInput
  }


  /**
   * CarroLoja upsert
   */
  export type CarroLojaUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CarroLoja
     */
    select?: CarroLojaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CarroLojaInclude<ExtArgs> | null
    /**
     * The filter to search for the CarroLoja to update in case it exists.
     */
    where: CarroLojaWhereUniqueInput
    /**
     * In case the CarroLoja found by the `where` argument doesn't exist, create a new CarroLoja with this data.
     */
    create: XOR<CarroLojaCreateInput, CarroLojaUncheckedCreateInput>
    /**
     * In case the CarroLoja was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CarroLojaUpdateInput, CarroLojaUncheckedUpdateInput>
  }


  /**
   * CarroLoja delete
   */
  export type CarroLojaDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CarroLoja
     */
    select?: CarroLojaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CarroLojaInclude<ExtArgs> | null
    /**
     * Filter which CarroLoja to delete.
     */
    where: CarroLojaWhereUniqueInput
  }


  /**
   * CarroLoja deleteMany
   */
  export type CarroLojaDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CarroLojas to delete
     */
    where?: CarroLojaWhereInput
  }


  /**
   * CarroLoja without action
   */
  export type CarroLojaDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CarroLoja
     */
    select?: CarroLojaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CarroLojaInclude<ExtArgs> | null
  }



  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const LojaScalarFieldEnum: {
    id: 'id',
    nome: 'nome',
    descricao: 'descricao',
    technicalData: 'technicalData',
    imagem: 'imagem'
  };

  export type LojaScalarFieldEnum = (typeof LojaScalarFieldEnum)[keyof typeof LojaScalarFieldEnum]


  export const FrotaScalarFieldEnum: {
    id: 'id',
    nome: 'nome',
    descricao: 'descricao',
    technicalData: 'technicalData',
    imagem: 'imagem'
  };

  export type FrotaScalarFieldEnum = (typeof FrotaScalarFieldEnum)[keyof typeof FrotaScalarFieldEnum]


  export const CarroLojaScalarFieldEnum: {
    id: 'id',
    lojaId: 'lojaId',
    carroId: 'carroId'
  };

  export type CarroLojaScalarFieldEnum = (typeof CarroLojaScalarFieldEnum)[keyof typeof CarroLojaScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type LojaWhereInput = {
    AND?: LojaWhereInput | LojaWhereInput[]
    OR?: LojaWhereInput[]
    NOT?: LojaWhereInput | LojaWhereInput[]
    id?: IntFilter<"Loja"> | number
    nome?: StringFilter<"Loja"> | string
    descricao?: StringFilter<"Loja"> | string
    technicalData?: StringFilter<"Loja"> | string
    imagem?: StringFilter<"Loja"> | string
    carrosLoja?: CarroLojaListRelationFilter
  }

  export type LojaOrderByWithRelationInput = {
    id?: SortOrder
    nome?: SortOrder
    descricao?: SortOrder
    technicalData?: SortOrder
    imagem?: SortOrder
    carrosLoja?: CarroLojaOrderByRelationAggregateInput
  }

  export type LojaWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: LojaWhereInput | LojaWhereInput[]
    OR?: LojaWhereInput[]
    NOT?: LojaWhereInput | LojaWhereInput[]
    nome?: StringFilter<"Loja"> | string
    descricao?: StringFilter<"Loja"> | string
    technicalData?: StringFilter<"Loja"> | string
    imagem?: StringFilter<"Loja"> | string
    carrosLoja?: CarroLojaListRelationFilter
  }, "id">

  export type LojaOrderByWithAggregationInput = {
    id?: SortOrder
    nome?: SortOrder
    descricao?: SortOrder
    technicalData?: SortOrder
    imagem?: SortOrder
    _count?: LojaCountOrderByAggregateInput
    _avg?: LojaAvgOrderByAggregateInput
    _max?: LojaMaxOrderByAggregateInput
    _min?: LojaMinOrderByAggregateInput
    _sum?: LojaSumOrderByAggregateInput
  }

  export type LojaScalarWhereWithAggregatesInput = {
    AND?: LojaScalarWhereWithAggregatesInput | LojaScalarWhereWithAggregatesInput[]
    OR?: LojaScalarWhereWithAggregatesInput[]
    NOT?: LojaScalarWhereWithAggregatesInput | LojaScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Loja"> | number
    nome?: StringWithAggregatesFilter<"Loja"> | string
    descricao?: StringWithAggregatesFilter<"Loja"> | string
    technicalData?: StringWithAggregatesFilter<"Loja"> | string
    imagem?: StringWithAggregatesFilter<"Loja"> | string
  }

  export type FrotaWhereInput = {
    AND?: FrotaWhereInput | FrotaWhereInput[]
    OR?: FrotaWhereInput[]
    NOT?: FrotaWhereInput | FrotaWhereInput[]
    id?: IntFilter<"Frota"> | number
    nome?: StringFilter<"Frota"> | string
    descricao?: StringFilter<"Frota"> | string
    technicalData?: StringFilter<"Frota"> | string
    imagem?: StringFilter<"Frota"> | string
    carrosLoja?: CarroLojaListRelationFilter
  }

  export type FrotaOrderByWithRelationInput = {
    id?: SortOrder
    nome?: SortOrder
    descricao?: SortOrder
    technicalData?: SortOrder
    imagem?: SortOrder
    carrosLoja?: CarroLojaOrderByRelationAggregateInput
  }

  export type FrotaWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: FrotaWhereInput | FrotaWhereInput[]
    OR?: FrotaWhereInput[]
    NOT?: FrotaWhereInput | FrotaWhereInput[]
    nome?: StringFilter<"Frota"> | string
    descricao?: StringFilter<"Frota"> | string
    technicalData?: StringFilter<"Frota"> | string
    imagem?: StringFilter<"Frota"> | string
    carrosLoja?: CarroLojaListRelationFilter
  }, "id">

  export type FrotaOrderByWithAggregationInput = {
    id?: SortOrder
    nome?: SortOrder
    descricao?: SortOrder
    technicalData?: SortOrder
    imagem?: SortOrder
    _count?: FrotaCountOrderByAggregateInput
    _avg?: FrotaAvgOrderByAggregateInput
    _max?: FrotaMaxOrderByAggregateInput
    _min?: FrotaMinOrderByAggregateInput
    _sum?: FrotaSumOrderByAggregateInput
  }

  export type FrotaScalarWhereWithAggregatesInput = {
    AND?: FrotaScalarWhereWithAggregatesInput | FrotaScalarWhereWithAggregatesInput[]
    OR?: FrotaScalarWhereWithAggregatesInput[]
    NOT?: FrotaScalarWhereWithAggregatesInput | FrotaScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Frota"> | number
    nome?: StringWithAggregatesFilter<"Frota"> | string
    descricao?: StringWithAggregatesFilter<"Frota"> | string
    technicalData?: StringWithAggregatesFilter<"Frota"> | string
    imagem?: StringWithAggregatesFilter<"Frota"> | string
  }

  export type CarroLojaWhereInput = {
    AND?: CarroLojaWhereInput | CarroLojaWhereInput[]
    OR?: CarroLojaWhereInput[]
    NOT?: CarroLojaWhereInput | CarroLojaWhereInput[]
    id?: IntFilter<"CarroLoja"> | number
    lojaId?: IntFilter<"CarroLoja"> | number
    carroId?: IntFilter<"CarroLoja"> | number
    loja?: XOR<LojaRelationFilter, LojaWhereInput>
    carro?: XOR<FrotaRelationFilter, FrotaWhereInput>
  }

  export type CarroLojaOrderByWithRelationInput = {
    id?: SortOrder
    lojaId?: SortOrder
    carroId?: SortOrder
    loja?: LojaOrderByWithRelationInput
    carro?: FrotaOrderByWithRelationInput
  }

  export type CarroLojaWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    lojaId_carroId?: CarroLojaLojaIdCarroIdCompoundUniqueInput
    AND?: CarroLojaWhereInput | CarroLojaWhereInput[]
    OR?: CarroLojaWhereInput[]
    NOT?: CarroLojaWhereInput | CarroLojaWhereInput[]
    lojaId?: IntFilter<"CarroLoja"> | number
    carroId?: IntFilter<"CarroLoja"> | number
    loja?: XOR<LojaRelationFilter, LojaWhereInput>
    carro?: XOR<FrotaRelationFilter, FrotaWhereInput>
  }, "id" | "lojaId_carroId">

  export type CarroLojaOrderByWithAggregationInput = {
    id?: SortOrder
    lojaId?: SortOrder
    carroId?: SortOrder
    _count?: CarroLojaCountOrderByAggregateInput
    _avg?: CarroLojaAvgOrderByAggregateInput
    _max?: CarroLojaMaxOrderByAggregateInput
    _min?: CarroLojaMinOrderByAggregateInput
    _sum?: CarroLojaSumOrderByAggregateInput
  }

  export type CarroLojaScalarWhereWithAggregatesInput = {
    AND?: CarroLojaScalarWhereWithAggregatesInput | CarroLojaScalarWhereWithAggregatesInput[]
    OR?: CarroLojaScalarWhereWithAggregatesInput[]
    NOT?: CarroLojaScalarWhereWithAggregatesInput | CarroLojaScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"CarroLoja"> | number
    lojaId?: IntWithAggregatesFilter<"CarroLoja"> | number
    carroId?: IntWithAggregatesFilter<"CarroLoja"> | number
  }

  export type LojaCreateInput = {
    nome: string
    descricao: string
    technicalData: string
    imagem: string
    carrosLoja?: CarroLojaCreateNestedManyWithoutLojaInput
  }

  export type LojaUncheckedCreateInput = {
    id?: number
    nome: string
    descricao: string
    technicalData: string
    imagem: string
    carrosLoja?: CarroLojaUncheckedCreateNestedManyWithoutLojaInput
  }

  export type LojaUpdateInput = {
    nome?: StringFieldUpdateOperationsInput | string
    descricao?: StringFieldUpdateOperationsInput | string
    technicalData?: StringFieldUpdateOperationsInput | string
    imagem?: StringFieldUpdateOperationsInput | string
    carrosLoja?: CarroLojaUpdateManyWithoutLojaNestedInput
  }

  export type LojaUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    descricao?: StringFieldUpdateOperationsInput | string
    technicalData?: StringFieldUpdateOperationsInput | string
    imagem?: StringFieldUpdateOperationsInput | string
    carrosLoja?: CarroLojaUncheckedUpdateManyWithoutLojaNestedInput
  }

  export type LojaCreateManyInput = {
    id?: number
    nome: string
    descricao: string
    technicalData: string
    imagem: string
  }

  export type LojaUpdateManyMutationInput = {
    nome?: StringFieldUpdateOperationsInput | string
    descricao?: StringFieldUpdateOperationsInput | string
    technicalData?: StringFieldUpdateOperationsInput | string
    imagem?: StringFieldUpdateOperationsInput | string
  }

  export type LojaUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    descricao?: StringFieldUpdateOperationsInput | string
    technicalData?: StringFieldUpdateOperationsInput | string
    imagem?: StringFieldUpdateOperationsInput | string
  }

  export type FrotaCreateInput = {
    nome: string
    descricao: string
    technicalData: string
    imagem: string
    carrosLoja?: CarroLojaCreateNestedManyWithoutCarroInput
  }

  export type FrotaUncheckedCreateInput = {
    id?: number
    nome: string
    descricao: string
    technicalData: string
    imagem: string
    carrosLoja?: CarroLojaUncheckedCreateNestedManyWithoutCarroInput
  }

  export type FrotaUpdateInput = {
    nome?: StringFieldUpdateOperationsInput | string
    descricao?: StringFieldUpdateOperationsInput | string
    technicalData?: StringFieldUpdateOperationsInput | string
    imagem?: StringFieldUpdateOperationsInput | string
    carrosLoja?: CarroLojaUpdateManyWithoutCarroNestedInput
  }

  export type FrotaUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    descricao?: StringFieldUpdateOperationsInput | string
    technicalData?: StringFieldUpdateOperationsInput | string
    imagem?: StringFieldUpdateOperationsInput | string
    carrosLoja?: CarroLojaUncheckedUpdateManyWithoutCarroNestedInput
  }

  export type FrotaCreateManyInput = {
    id?: number
    nome: string
    descricao: string
    technicalData: string
    imagem: string
  }

  export type FrotaUpdateManyMutationInput = {
    nome?: StringFieldUpdateOperationsInput | string
    descricao?: StringFieldUpdateOperationsInput | string
    technicalData?: StringFieldUpdateOperationsInput | string
    imagem?: StringFieldUpdateOperationsInput | string
  }

  export type FrotaUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    descricao?: StringFieldUpdateOperationsInput | string
    technicalData?: StringFieldUpdateOperationsInput | string
    imagem?: StringFieldUpdateOperationsInput | string
  }

  export type CarroLojaCreateInput = {
    loja: LojaCreateNestedOneWithoutCarrosLojaInput
    carro: FrotaCreateNestedOneWithoutCarrosLojaInput
  }

  export type CarroLojaUncheckedCreateInput = {
    id?: number
    lojaId: number
    carroId: number
  }

  export type CarroLojaUpdateInput = {
    loja?: LojaUpdateOneRequiredWithoutCarrosLojaNestedInput
    carro?: FrotaUpdateOneRequiredWithoutCarrosLojaNestedInput
  }

  export type CarroLojaUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    lojaId?: IntFieldUpdateOperationsInput | number
    carroId?: IntFieldUpdateOperationsInput | number
  }

  export type CarroLojaCreateManyInput = {
    id?: number
    lojaId: number
    carroId: number
  }

  export type CarroLojaUpdateManyMutationInput = {

  }

  export type CarroLojaUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    lojaId?: IntFieldUpdateOperationsInput | number
    carroId?: IntFieldUpdateOperationsInput | number
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type CarroLojaListRelationFilter = {
    every?: CarroLojaWhereInput
    some?: CarroLojaWhereInput
    none?: CarroLojaWhereInput
  }

  export type CarroLojaOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type LojaCountOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    descricao?: SortOrder
    technicalData?: SortOrder
    imagem?: SortOrder
  }

  export type LojaAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type LojaMaxOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    descricao?: SortOrder
    technicalData?: SortOrder
    imagem?: SortOrder
  }

  export type LojaMinOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    descricao?: SortOrder
    technicalData?: SortOrder
    imagem?: SortOrder
  }

  export type LojaSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type FrotaCountOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    descricao?: SortOrder
    technicalData?: SortOrder
    imagem?: SortOrder
  }

  export type FrotaAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type FrotaMaxOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    descricao?: SortOrder
    technicalData?: SortOrder
    imagem?: SortOrder
  }

  export type FrotaMinOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    descricao?: SortOrder
    technicalData?: SortOrder
    imagem?: SortOrder
  }

  export type FrotaSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type LojaRelationFilter = {
    is?: LojaWhereInput
    isNot?: LojaWhereInput
  }

  export type FrotaRelationFilter = {
    is?: FrotaWhereInput
    isNot?: FrotaWhereInput
  }

  export type CarroLojaLojaIdCarroIdCompoundUniqueInput = {
    lojaId: number
    carroId: number
  }

  export type CarroLojaCountOrderByAggregateInput = {
    id?: SortOrder
    lojaId?: SortOrder
    carroId?: SortOrder
  }

  export type CarroLojaAvgOrderByAggregateInput = {
    id?: SortOrder
    lojaId?: SortOrder
    carroId?: SortOrder
  }

  export type CarroLojaMaxOrderByAggregateInput = {
    id?: SortOrder
    lojaId?: SortOrder
    carroId?: SortOrder
  }

  export type CarroLojaMinOrderByAggregateInput = {
    id?: SortOrder
    lojaId?: SortOrder
    carroId?: SortOrder
  }

  export type CarroLojaSumOrderByAggregateInput = {
    id?: SortOrder
    lojaId?: SortOrder
    carroId?: SortOrder
  }

  export type CarroLojaCreateNestedManyWithoutLojaInput = {
    create?: XOR<CarroLojaCreateWithoutLojaInput, CarroLojaUncheckedCreateWithoutLojaInput> | CarroLojaCreateWithoutLojaInput[] | CarroLojaUncheckedCreateWithoutLojaInput[]
    connectOrCreate?: CarroLojaCreateOrConnectWithoutLojaInput | CarroLojaCreateOrConnectWithoutLojaInput[]
    createMany?: CarroLojaCreateManyLojaInputEnvelope
    connect?: CarroLojaWhereUniqueInput | CarroLojaWhereUniqueInput[]
  }

  export type CarroLojaUncheckedCreateNestedManyWithoutLojaInput = {
    create?: XOR<CarroLojaCreateWithoutLojaInput, CarroLojaUncheckedCreateWithoutLojaInput> | CarroLojaCreateWithoutLojaInput[] | CarroLojaUncheckedCreateWithoutLojaInput[]
    connectOrCreate?: CarroLojaCreateOrConnectWithoutLojaInput | CarroLojaCreateOrConnectWithoutLojaInput[]
    createMany?: CarroLojaCreateManyLojaInputEnvelope
    connect?: CarroLojaWhereUniqueInput | CarroLojaWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type CarroLojaUpdateManyWithoutLojaNestedInput = {
    create?: XOR<CarroLojaCreateWithoutLojaInput, CarroLojaUncheckedCreateWithoutLojaInput> | CarroLojaCreateWithoutLojaInput[] | CarroLojaUncheckedCreateWithoutLojaInput[]
    connectOrCreate?: CarroLojaCreateOrConnectWithoutLojaInput | CarroLojaCreateOrConnectWithoutLojaInput[]
    upsert?: CarroLojaUpsertWithWhereUniqueWithoutLojaInput | CarroLojaUpsertWithWhereUniqueWithoutLojaInput[]
    createMany?: CarroLojaCreateManyLojaInputEnvelope
    set?: CarroLojaWhereUniqueInput | CarroLojaWhereUniqueInput[]
    disconnect?: CarroLojaWhereUniqueInput | CarroLojaWhereUniqueInput[]
    delete?: CarroLojaWhereUniqueInput | CarroLojaWhereUniqueInput[]
    connect?: CarroLojaWhereUniqueInput | CarroLojaWhereUniqueInput[]
    update?: CarroLojaUpdateWithWhereUniqueWithoutLojaInput | CarroLojaUpdateWithWhereUniqueWithoutLojaInput[]
    updateMany?: CarroLojaUpdateManyWithWhereWithoutLojaInput | CarroLojaUpdateManyWithWhereWithoutLojaInput[]
    deleteMany?: CarroLojaScalarWhereInput | CarroLojaScalarWhereInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type CarroLojaUncheckedUpdateManyWithoutLojaNestedInput = {
    create?: XOR<CarroLojaCreateWithoutLojaInput, CarroLojaUncheckedCreateWithoutLojaInput> | CarroLojaCreateWithoutLojaInput[] | CarroLojaUncheckedCreateWithoutLojaInput[]
    connectOrCreate?: CarroLojaCreateOrConnectWithoutLojaInput | CarroLojaCreateOrConnectWithoutLojaInput[]
    upsert?: CarroLojaUpsertWithWhereUniqueWithoutLojaInput | CarroLojaUpsertWithWhereUniqueWithoutLojaInput[]
    createMany?: CarroLojaCreateManyLojaInputEnvelope
    set?: CarroLojaWhereUniqueInput | CarroLojaWhereUniqueInput[]
    disconnect?: CarroLojaWhereUniqueInput | CarroLojaWhereUniqueInput[]
    delete?: CarroLojaWhereUniqueInput | CarroLojaWhereUniqueInput[]
    connect?: CarroLojaWhereUniqueInput | CarroLojaWhereUniqueInput[]
    update?: CarroLojaUpdateWithWhereUniqueWithoutLojaInput | CarroLojaUpdateWithWhereUniqueWithoutLojaInput[]
    updateMany?: CarroLojaUpdateManyWithWhereWithoutLojaInput | CarroLojaUpdateManyWithWhereWithoutLojaInput[]
    deleteMany?: CarroLojaScalarWhereInput | CarroLojaScalarWhereInput[]
  }

  export type CarroLojaCreateNestedManyWithoutCarroInput = {
    create?: XOR<CarroLojaCreateWithoutCarroInput, CarroLojaUncheckedCreateWithoutCarroInput> | CarroLojaCreateWithoutCarroInput[] | CarroLojaUncheckedCreateWithoutCarroInput[]
    connectOrCreate?: CarroLojaCreateOrConnectWithoutCarroInput | CarroLojaCreateOrConnectWithoutCarroInput[]
    createMany?: CarroLojaCreateManyCarroInputEnvelope
    connect?: CarroLojaWhereUniqueInput | CarroLojaWhereUniqueInput[]
  }

  export type CarroLojaUncheckedCreateNestedManyWithoutCarroInput = {
    create?: XOR<CarroLojaCreateWithoutCarroInput, CarroLojaUncheckedCreateWithoutCarroInput> | CarroLojaCreateWithoutCarroInput[] | CarroLojaUncheckedCreateWithoutCarroInput[]
    connectOrCreate?: CarroLojaCreateOrConnectWithoutCarroInput | CarroLojaCreateOrConnectWithoutCarroInput[]
    createMany?: CarroLojaCreateManyCarroInputEnvelope
    connect?: CarroLojaWhereUniqueInput | CarroLojaWhereUniqueInput[]
  }

  export type CarroLojaUpdateManyWithoutCarroNestedInput = {
    create?: XOR<CarroLojaCreateWithoutCarroInput, CarroLojaUncheckedCreateWithoutCarroInput> | CarroLojaCreateWithoutCarroInput[] | CarroLojaUncheckedCreateWithoutCarroInput[]
    connectOrCreate?: CarroLojaCreateOrConnectWithoutCarroInput | CarroLojaCreateOrConnectWithoutCarroInput[]
    upsert?: CarroLojaUpsertWithWhereUniqueWithoutCarroInput | CarroLojaUpsertWithWhereUniqueWithoutCarroInput[]
    createMany?: CarroLojaCreateManyCarroInputEnvelope
    set?: CarroLojaWhereUniqueInput | CarroLojaWhereUniqueInput[]
    disconnect?: CarroLojaWhereUniqueInput | CarroLojaWhereUniqueInput[]
    delete?: CarroLojaWhereUniqueInput | CarroLojaWhereUniqueInput[]
    connect?: CarroLojaWhereUniqueInput | CarroLojaWhereUniqueInput[]
    update?: CarroLojaUpdateWithWhereUniqueWithoutCarroInput | CarroLojaUpdateWithWhereUniqueWithoutCarroInput[]
    updateMany?: CarroLojaUpdateManyWithWhereWithoutCarroInput | CarroLojaUpdateManyWithWhereWithoutCarroInput[]
    deleteMany?: CarroLojaScalarWhereInput | CarroLojaScalarWhereInput[]
  }

  export type CarroLojaUncheckedUpdateManyWithoutCarroNestedInput = {
    create?: XOR<CarroLojaCreateWithoutCarroInput, CarroLojaUncheckedCreateWithoutCarroInput> | CarroLojaCreateWithoutCarroInput[] | CarroLojaUncheckedCreateWithoutCarroInput[]
    connectOrCreate?: CarroLojaCreateOrConnectWithoutCarroInput | CarroLojaCreateOrConnectWithoutCarroInput[]
    upsert?: CarroLojaUpsertWithWhereUniqueWithoutCarroInput | CarroLojaUpsertWithWhereUniqueWithoutCarroInput[]
    createMany?: CarroLojaCreateManyCarroInputEnvelope
    set?: CarroLojaWhereUniqueInput | CarroLojaWhereUniqueInput[]
    disconnect?: CarroLojaWhereUniqueInput | CarroLojaWhereUniqueInput[]
    delete?: CarroLojaWhereUniqueInput | CarroLojaWhereUniqueInput[]
    connect?: CarroLojaWhereUniqueInput | CarroLojaWhereUniqueInput[]
    update?: CarroLojaUpdateWithWhereUniqueWithoutCarroInput | CarroLojaUpdateWithWhereUniqueWithoutCarroInput[]
    updateMany?: CarroLojaUpdateManyWithWhereWithoutCarroInput | CarroLojaUpdateManyWithWhereWithoutCarroInput[]
    deleteMany?: CarroLojaScalarWhereInput | CarroLojaScalarWhereInput[]
  }

  export type LojaCreateNestedOneWithoutCarrosLojaInput = {
    create?: XOR<LojaCreateWithoutCarrosLojaInput, LojaUncheckedCreateWithoutCarrosLojaInput>
    connectOrCreate?: LojaCreateOrConnectWithoutCarrosLojaInput
    connect?: LojaWhereUniqueInput
  }

  export type FrotaCreateNestedOneWithoutCarrosLojaInput = {
    create?: XOR<FrotaCreateWithoutCarrosLojaInput, FrotaUncheckedCreateWithoutCarrosLojaInput>
    connectOrCreate?: FrotaCreateOrConnectWithoutCarrosLojaInput
    connect?: FrotaWhereUniqueInput
  }

  export type LojaUpdateOneRequiredWithoutCarrosLojaNestedInput = {
    create?: XOR<LojaCreateWithoutCarrosLojaInput, LojaUncheckedCreateWithoutCarrosLojaInput>
    connectOrCreate?: LojaCreateOrConnectWithoutCarrosLojaInput
    upsert?: LojaUpsertWithoutCarrosLojaInput
    connect?: LojaWhereUniqueInput
    update?: XOR<XOR<LojaUpdateToOneWithWhereWithoutCarrosLojaInput, LojaUpdateWithoutCarrosLojaInput>, LojaUncheckedUpdateWithoutCarrosLojaInput>
  }

  export type FrotaUpdateOneRequiredWithoutCarrosLojaNestedInput = {
    create?: XOR<FrotaCreateWithoutCarrosLojaInput, FrotaUncheckedCreateWithoutCarrosLojaInput>
    connectOrCreate?: FrotaCreateOrConnectWithoutCarrosLojaInput
    upsert?: FrotaUpsertWithoutCarrosLojaInput
    connect?: FrotaWhereUniqueInput
    update?: XOR<XOR<FrotaUpdateToOneWithWhereWithoutCarrosLojaInput, FrotaUpdateWithoutCarrosLojaInput>, FrotaUncheckedUpdateWithoutCarrosLojaInput>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type CarroLojaCreateWithoutLojaInput = {
    carro: FrotaCreateNestedOneWithoutCarrosLojaInput
  }

  export type CarroLojaUncheckedCreateWithoutLojaInput = {
    id?: number
    carroId: number
  }

  export type CarroLojaCreateOrConnectWithoutLojaInput = {
    where: CarroLojaWhereUniqueInput
    create: XOR<CarroLojaCreateWithoutLojaInput, CarroLojaUncheckedCreateWithoutLojaInput>
  }

  export type CarroLojaCreateManyLojaInputEnvelope = {
    data: CarroLojaCreateManyLojaInput | CarroLojaCreateManyLojaInput[]
    skipDuplicates?: boolean
  }

  export type CarroLojaUpsertWithWhereUniqueWithoutLojaInput = {
    where: CarroLojaWhereUniqueInput
    update: XOR<CarroLojaUpdateWithoutLojaInput, CarroLojaUncheckedUpdateWithoutLojaInput>
    create: XOR<CarroLojaCreateWithoutLojaInput, CarroLojaUncheckedCreateWithoutLojaInput>
  }

  export type CarroLojaUpdateWithWhereUniqueWithoutLojaInput = {
    where: CarroLojaWhereUniqueInput
    data: XOR<CarroLojaUpdateWithoutLojaInput, CarroLojaUncheckedUpdateWithoutLojaInput>
  }

  export type CarroLojaUpdateManyWithWhereWithoutLojaInput = {
    where: CarroLojaScalarWhereInput
    data: XOR<CarroLojaUpdateManyMutationInput, CarroLojaUncheckedUpdateManyWithoutLojaInput>
  }

  export type CarroLojaScalarWhereInput = {
    AND?: CarroLojaScalarWhereInput | CarroLojaScalarWhereInput[]
    OR?: CarroLojaScalarWhereInput[]
    NOT?: CarroLojaScalarWhereInput | CarroLojaScalarWhereInput[]
    id?: IntFilter<"CarroLoja"> | number
    lojaId?: IntFilter<"CarroLoja"> | number
    carroId?: IntFilter<"CarroLoja"> | number
  }

  export type CarroLojaCreateWithoutCarroInput = {
    loja: LojaCreateNestedOneWithoutCarrosLojaInput
  }

  export type CarroLojaUncheckedCreateWithoutCarroInput = {
    id?: number
    lojaId: number
  }

  export type CarroLojaCreateOrConnectWithoutCarroInput = {
    where: CarroLojaWhereUniqueInput
    create: XOR<CarroLojaCreateWithoutCarroInput, CarroLojaUncheckedCreateWithoutCarroInput>
  }

  export type CarroLojaCreateManyCarroInputEnvelope = {
    data: CarroLojaCreateManyCarroInput | CarroLojaCreateManyCarroInput[]
    skipDuplicates?: boolean
  }

  export type CarroLojaUpsertWithWhereUniqueWithoutCarroInput = {
    where: CarroLojaWhereUniqueInput
    update: XOR<CarroLojaUpdateWithoutCarroInput, CarroLojaUncheckedUpdateWithoutCarroInput>
    create: XOR<CarroLojaCreateWithoutCarroInput, CarroLojaUncheckedCreateWithoutCarroInput>
  }

  export type CarroLojaUpdateWithWhereUniqueWithoutCarroInput = {
    where: CarroLojaWhereUniqueInput
    data: XOR<CarroLojaUpdateWithoutCarroInput, CarroLojaUncheckedUpdateWithoutCarroInput>
  }

  export type CarroLojaUpdateManyWithWhereWithoutCarroInput = {
    where: CarroLojaScalarWhereInput
    data: XOR<CarroLojaUpdateManyMutationInput, CarroLojaUncheckedUpdateManyWithoutCarroInput>
  }

  export type LojaCreateWithoutCarrosLojaInput = {
    nome: string
    descricao: string
    technicalData: string
    imagem: string
  }

  export type LojaUncheckedCreateWithoutCarrosLojaInput = {
    id?: number
    nome: string
    descricao: string
    technicalData: string
    imagem: string
  }

  export type LojaCreateOrConnectWithoutCarrosLojaInput = {
    where: LojaWhereUniqueInput
    create: XOR<LojaCreateWithoutCarrosLojaInput, LojaUncheckedCreateWithoutCarrosLojaInput>
  }

  export type FrotaCreateWithoutCarrosLojaInput = {
    nome: string
    descricao: string
    technicalData: string
    imagem: string
  }

  export type FrotaUncheckedCreateWithoutCarrosLojaInput = {
    id?: number
    nome: string
    descricao: string
    technicalData: string
    imagem: string
  }

  export type FrotaCreateOrConnectWithoutCarrosLojaInput = {
    where: FrotaWhereUniqueInput
    create: XOR<FrotaCreateWithoutCarrosLojaInput, FrotaUncheckedCreateWithoutCarrosLojaInput>
  }

  export type LojaUpsertWithoutCarrosLojaInput = {
    update: XOR<LojaUpdateWithoutCarrosLojaInput, LojaUncheckedUpdateWithoutCarrosLojaInput>
    create: XOR<LojaCreateWithoutCarrosLojaInput, LojaUncheckedCreateWithoutCarrosLojaInput>
    where?: LojaWhereInput
  }

  export type LojaUpdateToOneWithWhereWithoutCarrosLojaInput = {
    where?: LojaWhereInput
    data: XOR<LojaUpdateWithoutCarrosLojaInput, LojaUncheckedUpdateWithoutCarrosLojaInput>
  }

  export type LojaUpdateWithoutCarrosLojaInput = {
    nome?: StringFieldUpdateOperationsInput | string
    descricao?: StringFieldUpdateOperationsInput | string
    technicalData?: StringFieldUpdateOperationsInput | string
    imagem?: StringFieldUpdateOperationsInput | string
  }

  export type LojaUncheckedUpdateWithoutCarrosLojaInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    descricao?: StringFieldUpdateOperationsInput | string
    technicalData?: StringFieldUpdateOperationsInput | string
    imagem?: StringFieldUpdateOperationsInput | string
  }

  export type FrotaUpsertWithoutCarrosLojaInput = {
    update: XOR<FrotaUpdateWithoutCarrosLojaInput, FrotaUncheckedUpdateWithoutCarrosLojaInput>
    create: XOR<FrotaCreateWithoutCarrosLojaInput, FrotaUncheckedCreateWithoutCarrosLojaInput>
    where?: FrotaWhereInput
  }

  export type FrotaUpdateToOneWithWhereWithoutCarrosLojaInput = {
    where?: FrotaWhereInput
    data: XOR<FrotaUpdateWithoutCarrosLojaInput, FrotaUncheckedUpdateWithoutCarrosLojaInput>
  }

  export type FrotaUpdateWithoutCarrosLojaInput = {
    nome?: StringFieldUpdateOperationsInput | string
    descricao?: StringFieldUpdateOperationsInput | string
    technicalData?: StringFieldUpdateOperationsInput | string
    imagem?: StringFieldUpdateOperationsInput | string
  }

  export type FrotaUncheckedUpdateWithoutCarrosLojaInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    descricao?: StringFieldUpdateOperationsInput | string
    technicalData?: StringFieldUpdateOperationsInput | string
    imagem?: StringFieldUpdateOperationsInput | string
  }

  export type CarroLojaCreateManyLojaInput = {
    id?: number
    carroId: number
  }

  export type CarroLojaUpdateWithoutLojaInput = {
    carro?: FrotaUpdateOneRequiredWithoutCarrosLojaNestedInput
  }

  export type CarroLojaUncheckedUpdateWithoutLojaInput = {
    id?: IntFieldUpdateOperationsInput | number
    carroId?: IntFieldUpdateOperationsInput | number
  }

  export type CarroLojaUncheckedUpdateManyWithoutLojaInput = {
    id?: IntFieldUpdateOperationsInput | number
    carroId?: IntFieldUpdateOperationsInput | number
  }

  export type CarroLojaCreateManyCarroInput = {
    id?: number
    lojaId: number
  }

  export type CarroLojaUpdateWithoutCarroInput = {
    loja?: LojaUpdateOneRequiredWithoutCarrosLojaNestedInput
  }

  export type CarroLojaUncheckedUpdateWithoutCarroInput = {
    id?: IntFieldUpdateOperationsInput | number
    lojaId?: IntFieldUpdateOperationsInput | number
  }

  export type CarroLojaUncheckedUpdateManyWithoutCarroInput = {
    id?: IntFieldUpdateOperationsInput | number
    lojaId?: IntFieldUpdateOperationsInput | number
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use LojaCountOutputTypeDefaultArgs instead
     */
    export type LojaCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = LojaCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use FrotaCountOutputTypeDefaultArgs instead
     */
    export type FrotaCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = FrotaCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use LojaDefaultArgs instead
     */
    export type LojaArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = LojaDefaultArgs<ExtArgs>
    /**
     * @deprecated Use FrotaDefaultArgs instead
     */
    export type FrotaArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = FrotaDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CarroLojaDefaultArgs instead
     */
    export type CarroLojaArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CarroLojaDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}